package org.kindofdev

import com.typesafe.config.ConfigFactory
import org.apache.flink.contrib.streaming.state.RocksDBStateBackend
import org.apache.flink.streaming.api.scala.StreamExecutionEnvironment
import org.kindofdev.io.IORepo.LiveIORepo
import org.kindofdev.io.SessionHttpClient.SessionHttpClientFake
import org.kindofdev.log.Logging

import scala.concurrent.duration._

object MoneyEnrichmentApp extends Logging {

  def main(args: Array[String]): Unit = {
    val config = ConfigFactory.load()
    val settings = new Settings(config)

    implicit val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment
    env.setStateBackend(new RocksDBStateBackend(settings.checkpointURI, true))
    env.setParallelism(settings.defaultParallelism)
    env.enableCheckpointing(settings.checkpointingIntervalInMillis)
    env.getConfig.disableAutoGeneratedUIDs()

    val ioRepo = new LiveIORepo(settings)
    val sessionHttpClient = new SessionHttpClientFake("UY", 100.millis)

    val job: MoneyEnrichmentJob = new MoneyEnrichmentJob(ioRepo, sessionHttpClient, settings)

    logger.info("Executing MoneyEnrichmentJob ...")
    job.execute()
  }

}
